version: '3.8'

services:
  # PostgreSQL Database
  postgres:
    image: postgres:15-alpine
    restart: unless-stopped
    environment:
      POSTGRES_DB: ${POSTGRES_DB:-yafa_explorer}
      POSTGRES_USER: ${POSTGRES_USER:-yafa_user}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD:-secure_password}
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./docker/init-db.sql:/docker-entrypoint-initdb.d/init-db.sql
    ports:
      - "5432:5432"
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER:-yafa_user} -d ${POSTGRES_DB:-yafa_explorer}"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Indexer Service
  indexer:
    build:
      context: ./indexer
      dockerfile: ../docker/Dockerfile.indexer
    restart: unless-stopped
    depends_on:
      postgres:
        condition: service_healthy
    environment:
      DATABASE_URL: postgresql://${POSTGRES_USER:-yafa_user}:${POSTGRES_PASSWORD:-secure_password}@postgres:5432/${POSTGRES_DB:-yafa_explorer}
      RPC_URL: ${RPC_URL:-http://host.docker.internal:3000}
      RPC_WSS_URL: ${RPC_WSS_URL:-ws://host.docker.internal:3000}
      INDEXER_POLL_INTERVAL: ${INDEXER_POLL_INTERVAL:-5000}
      INDEXER_BATCH_SIZE: ${INDEXER_BATCH_SIZE:-100}
      REORG_DEPTH: ${REORG_DEPTH:-12}
      START_BLOCK: ${START_BLOCK:-0}
      LOG_LEVEL: ${LOG_LEVEL:-info}
      NODE_ENV: ${NODE_ENV:-production}
    volumes:
      - indexer_logs:/app/logs
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3000/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  # API Service
  api:
    build:
      context: ./api
      dockerfile: ../docker/Dockerfile.api
    restart: unless-stopped
    depends_on:
      postgres:
        condition: service_healthy
    environment:
      DATABASE_URL: postgresql://${POSTGRES_USER:-yafa_user}:${POSTGRES_PASSWORD:-secure_password}@postgres:5432/${POSTGRES_DB:-yafa_explorer}
      API_PORT: ${API_PORT:-3001}
      NODE_ENV: ${NODE_ENV:-production}
      CORS_ORIGINS: ${CORS_ORIGINS:-http://localhost:3002}
    ports:
      - "${API_PORT:-3001}:3001"
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3001/api/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Web Frontend
  web:
    build:
      context: ./web
      dockerfile: ../docker/Dockerfile.web
    restart: unless-stopped
    depends_on:
      api:
        condition: service_healthy
    environment:
      NEXT_PUBLIC_API_URL: http://localhost:${API_PORT:-3001}
      NEXT_PUBLIC_CHAIN_ID: ${NEXT_PUBLIC_CHAIN_ID:-42069}
      NEXT_PUBLIC_CHAIN_NAME: ${NEXT_PUBLIC_CHAIN_NAME:-Yafa L2}
      WEB_PORT: ${WEB_PORT:-3002}
      NODE_ENV: ${NODE_ENV:-production}
    ports:
      - "${WEB_PORT:-3002}:3002"
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3002"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Redis (for caching and real-time features)
  redis:
    image: redis:7-alpine
    restart: unless-stopped
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    command: redis-server --appendonly yes
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 30s
      timeout: 10s
      retries: 3

volumes:
  postgres_data:
    driver: local
  redis_data:
    driver: local
  indexer_logs:
    driver: local

networks:
  default:
    name: yafa_explorer