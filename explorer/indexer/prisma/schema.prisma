// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Block {
  id            String   @id @default(cuid())
  
  // Block identifiers
  number        BigInt   @unique
  hash          String   @unique
  parentHash    String
  
  // Block metadata
  timestamp     DateTime
  difficulty    String?
  totalDifficulty String?
  gasLimit      String
  gasUsed       String
  baseFeePerGas String?
  
  // Miner/validator info
  miner         String
  extraData     String?
  nonce         String?
  
  // Block content
  size          String?
  
  // Relationships
  transactions  Transaction[]
  
  // Indexing metadata
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
  
  @@map("blocks")
  @@index([number])
  @@index([timestamp])
  @@index([miner])
}

model Transaction {
  id              String   @id @default(cuid())
  
  // Transaction identifiers
  hash            String   @unique
  blockNumber     BigInt
  blockHash       String
  transactionIndex Int
  
  // Transaction details
  from            String
  to              String?
  value           String
  gas             String
  gasUsed         String?
  gasPrice        String
  maxFeePerGas    String?
  maxPriorityFeePerGas String?
  
  // Transaction data
  input           String   @default("0x")
  nonce           BigInt
  type            Int?     @default(0)
  
  // Status
  status          String   @default("pending") // success, failed, pending
  
  // Timestamps
  timestamp       DateTime
  
  // Relationships
  block           Block    @relation(fields: [blockNumber], references: [number], onDelete: Cascade)
  logs            Log[]
  
  // Indexing metadata
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt
  
  @@map("transactions")
  @@index([from])
  @@index([to])
  @@index([blockNumber])
  @@index([timestamp])
  @@index([status])
}

model Log {
  id              String   @id @default(cuid())
  
  // Log identifiers
  transactionHash String
  logIndex        Int
  blockNumber     BigInt
  
  // Log details
  address         String
  topics          String[] // Array of topic hashes
  data            String
  removed         Boolean  @default(false)
  
  // Relationships
  transaction     Transaction @relation(fields: [transactionHash], references: [hash], onDelete: Cascade)
  
  // Indexing metadata
  createdAt       DateTime @default(now())
  
  @@map("logs")
  @@index([address])
  @@index([blockNumber])
  @@index([transactionHash])
  @@unique([transactionHash, logIndex])
}

model Address {
  address         String   @id
  
  // Account details
  balance         String   @default("0")
  nonce           BigInt   @default(0)
  isContract      Boolean  @default(false)
  code            String?
  contractName    String?
  
  // Statistics
  firstSeen       DateTime @default(now())
  lastSeen        DateTime @default(now())
  
  // Indexing metadata
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt
  
  @@map("addresses")
  @@index([isContract])
  @@index([firstSeen])
  @@index([lastSeen])
}

model Token {
  id              String   @id @default(cuid())
  address         String   @unique
  
  // Token details
  name            String
  symbol          String
  decimals        Int
  totalSupply     String
  type            TokenType
  
  // Relationships
  transfers       TokenTransfer[]
  
  // Indexing metadata
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt
  
  @@map("tokens")
  @@index([symbol])
  @@index([type])
}

model TokenTransfer {
  id              String   @id @default(cuid())
  
  // Transfer identifiers
  transactionHash String
  blockNumber     BigInt
  logIndex        Int
  tokenAddress    String
  
  // Transfer details
  from            String
  to              String
  value           String
  
  // Relationships
  token           Token    @relation(fields: [tokenAddress], references: [address], onDelete: Cascade)
  
  // Indexing metadata
  createdAt       DateTime @default(now())
  
  @@map("token_transfers")
  @@index([tokenAddress])
  @@index([from])
  @@index([to])
  @@index([blockNumber])
  @@unique([transactionHash, logIndex])
}

model SyncStatus {
  id              String   @id
  currentBlock    BigInt
  isSyncing       Boolean  @default(false)
  lastSyncTime    DateTime?
  
  // Indexing metadata
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt
  
  @@map("sync_status")
}

model ChainStats {
  id              String   @id
  
  // Chain statistics
  totalBlocks     BigInt   @default(0)
  totalTransactions BigInt @default(0)
  totalAddresses  BigInt   @default(0)
  averageBlockTime Float   @default(12.0)
  
  // Network stats
  networkHashrate String?
  totalSupply     String?
  circulatingSupply String?
  
  // Updated timestamp
  updatedAt       DateTime @updatedAt
  
  @@map("chain_stats")
}

enum TokenType {
  ERC20
  ERC721
  ERC1155
}